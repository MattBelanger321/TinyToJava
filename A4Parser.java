
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Mar 12 23:05:00 EDT 2020
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;

/** CUP v0.10k generated parser.
  * @version Thu Mar 12 23:05:00 EDT 2020
  */
public class A4Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public A4Parser() {super();}

  /** Constructor which sets the default scanner. */
  public A4Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\072\000\002\003\003\000\002\002\004\000\002\004" +
    "\003\000\002\004\004\000\002\006\011\000\002\006\010" +
    "\000\002\012\004\000\002\012\002\000\002\014\005\000" +
    "\002\014\002\000\002\013\004\000\002\005\005\000\002" +
    "\024\004\000\002\024\003\000\002\010\003\000\002\010" +
    "\003\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\011\000\002\033\011\000\002\033\007\000\002" +
    "\016\006\000\002\016\006\000\002\015\005\000\002\015" +
    "\004\000\002\017\005\000\002\020\011\000\002\021\011" +
    "\000\002\022\003\000\002\022\004\000\002\025\003\000" +
    "\002\025\004\000\002\026\005\000\002\026\004\000\002" +
    "\027\003\000\002\027\003\000\002\027\005\000\002\027" +
    "\006\000\002\030\005\000\002\030\004\000\002\011\005" +
    "\000\002\011\005\000\002\023\003\000\002\023\004\000" +
    "\002\023\002\000\002\031\004\000\002\031\005\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\035" +
    "\003\000\002\035\003\000\002\034\003\000\002\034\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\162\000\010\032\012\033\007\034\006\001\002\000" +
    "\012\002\uffff\032\012\033\007\034\006\001\002\000\004" +
    "\002\001\001\002\000\006\013\uffcc\014\uffcc\001\002\000" +
    "\006\013\uffcd\014\uffcd\001\002\000\006\013\015\014\014" +
    "\001\002\000\004\002\013\001\002\000\006\013\uffce\014" +
    "\uffce\001\002\000\004\002\000\001\002\000\004\015\160" +
    "\001\002\000\004\014\016\001\002\000\004\015\017\001" +
    "\002\000\012\016\ufffa\032\012\033\007\034\006\001\002" +
    "\000\004\014\157\001\002\000\004\016\027\001\002\000" +
    "\006\016\ufff8\031\023\001\002\000\010\032\012\033\007" +
    "\034\006\001\002\000\004\016\ufffb\001\002\000\006\016" +
    "\ufff8\031\023\001\002\000\004\016\ufff9\001\002\000\004" +
    "\011\030\001\002\000\024\004\037\005\040\007\032\010" +
    "\042\011\030\014\043\032\012\033\007\034\006\001\002" +
    "\000\012\002\ufffd\032\ufffd\033\ufffd\034\ufffd\001\002\000" +
    "\004\015\151\001\002\000\026\004\037\005\040\007\032" +
    "\010\042\011\030\012\ufff4\014\043\032\012\033\007\034" +
    "\006\001\002\000\030\004\uffec\005\uffec\006\uffec\007\uffec" +
    "\010\uffec\011\uffec\012\uffec\014\uffec\032\uffec\033\uffec\034" +
    "\uffec\001\002\000\004\014\145\001\002\000\026\004\ufff3" +
    "\005\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\014\ufff3\032" +
    "\ufff3\033\ufff3\034\ufff3\001\002\000\010\014\055\015\062" +
    "\023\054\001\002\000\004\015\121\001\002\000\030\004" +
    "\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1" +
    "\014\ufff1\032\ufff1\033\ufff1\034\ufff1\001\002\000\004\015" +
    "\113\001\002\000\004\030\053\001\002\000\030\004\uffef" +
    "\005\uffef\006\uffef\007\uffef\010\uffef\011\uffef\012\uffef\014" +
    "\uffef\032\uffef\033\uffef\034\uffef\001\002\000\004\012\052" +
    "\001\002\000\030\004\uffed\005\uffed\006\uffed\007\uffed\010" +
    "\uffed\011\uffed\012\uffed\014\uffed\032\uffed\033\uffed\034\uffed" +
    "\001\002\000\030\004\uffee\005\uffee\006\uffee\007\uffee\010" +
    "\uffee\011\uffee\012\uffee\014\uffee\032\uffee\033\uffee\034\uffee" +
    "\001\002\000\026\004\ufff2\005\ufff2\007\ufff2\010\ufff2\011" +
    "\ufff2\012\ufff2\014\ufff2\032\ufff2\033\ufff2\034\ufff2\001\002" +
    "\000\030\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011" +
    "\ufff0\012\ufff0\014\ufff0\032\ufff0\033\ufff0\034\ufff0\001\002" +
    "\000\032\002\ufff6\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010" +
    "\ufff6\011\ufff6\012\ufff6\014\ufff6\032\ufff6\033\ufff6\034\ufff6" +
    "\001\002\000\012\014\055\015\062\020\061\023\054\001" +
    "\002\000\024\016\uffdb\017\uffdb\021\uffdb\022\uffdb\024\uffdb" +
    "\025\uffdb\026\uffdb\027\uffdb\031\uffdb\001\002\000\026\015" +
    "\103\016\uffda\017\uffda\021\uffda\022\uffda\024\uffda\025\uffda" +
    "\026\uffda\027\uffda\031\uffda\001\002\000\020\016\uffe1\017" +
    "\uffe1\021\076\022\077\024\uffe1\025\uffe1\031\uffe1\001\002" +
    "\000\024\016\uffdf\017\uffdf\021\uffdf\022\uffdf\024\uffdf\025" +
    "\uffdf\026\070\027\072\031\uffdf\001\002\000\004\017\066" +
    "\001\002\000\004\017\065\001\002\000\010\014\055\015" +
    "\062\023\054\001\002\000\004\016\064\001\002\000\024" +
    "\016\uffd9\017\uffd9\021\uffd9\022\uffd9\024\uffd9\025\uffd9\026" +
    "\uffd9\027\uffd9\031\uffd9\001\002\000\030\004\uffe7\005\uffe7" +
    "\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\014\uffe7\032" +
    "\uffe7\033\uffe7\034\uffe7\001\002\000\030\004\uffe8\005\uffe8" +
    "\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\014\uffe8\032" +
    "\uffe8\033\uffe8\034\uffe8\001\002\000\020\016\uffde\017\uffde" +
    "\021\uffde\022\uffde\024\uffde\025\uffde\031\uffde\001\002\000" +
    "\010\014\uffc9\015\uffc9\023\uffc9\001\002\000\010\014\055" +
    "\015\062\023\054\001\002\000\010\014\uffc8\015\uffc8\023" +
    "\uffc8\001\002\000\024\016\uffd6\017\uffd6\021\uffd6\022\uffd6" +
    "\024\uffd6\025\uffd6\026\070\027\072\031\uffd6\001\002\000" +
    "\020\016\uffd7\017\uffd7\021\uffd7\022\uffd7\024\uffd7\025\uffd7" +
    "\031\uffd7\001\002\000\014\016\uffe0\017\uffe0\024\uffe0\025" +
    "\uffe0\031\uffe0\001\002\000\010\014\uffcb\015\uffcb\023\uffcb" +
    "\001\002\000\010\014\uffca\015\uffca\023\uffca\001\002\000" +
    "\010\014\055\015\062\023\054\001\002\000\020\016\uffdc" +
    "\017\uffdc\021\076\022\077\024\uffdc\025\uffdc\031\uffdc\001" +
    "\002\000\014\016\uffdd\017\uffdd\024\uffdd\025\uffdd\031\uffdd" +
    "\001\002\000\012\014\055\015\062\016\uffd1\023\054\001" +
    "\002\000\004\016\112\001\002\000\006\016\uffd3\031\107" +
    "\001\002\000\004\016\uffd2\001\002\000\010\014\055\015" +
    "\062\023\054\001\002\000\006\016\uffd0\031\107\001\002" +
    "\000\004\016\uffcf\001\002\000\024\016\uffd8\017\uffd8\021" +
    "\uffd8\022\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\031\uffd8" +
    "\001\002\000\010\014\055\015\062\023\054\001\002\000" +
    "\004\031\115\001\002\000\004\020\116\001\002\000\004" +
    "\016\117\001\002\000\004\017\120\001\002\000\030\004" +
    "\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3" +
    "\014\uffe3\032\uffe3\033\uffe3\034\uffe3\001\002\000\010\014" +
    "\055\015\062\023\054\001\002\000\004\016\130\001\002" +
    "\000\006\024\124\025\125\001\002\000\010\014\055\015" +
    "\062\023\054\001\002\000\010\014\055\015\062\023\054" +
    "\001\002\000\004\016\uffd4\001\002\000\004\016\uffd5\001" +
    "\002\000\024\004\037\005\131\007\032\010\042\011\030" +
    "\014\043\032\012\033\007\034\006\001\002\000\004\015" +
    "\136\001\002\000\030\004\uffe9\005\uffe9\006\133\007\uffe9" +
    "\010\uffe9\011\uffe9\012\uffe9\014\uffe9\032\uffe9\033\uffe9\034" +
    "\uffe9\001\002\000\024\004\037\005\040\007\032\010\042" +
    "\011\030\014\043\032\012\033\007\034\006\001\002\000" +
    "\026\004\uffea\005\uffea\007\uffea\010\uffea\011\uffea\012\uffea" +
    "\014\uffea\032\uffea\033\uffea\034\uffea\001\002\000\030\004" +
    "\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb" +
    "\014\uffeb\032\uffeb\033\uffeb\034\uffeb\001\002\000\010\014" +
    "\055\015\062\023\054\001\002\000\004\016\140\001\002" +
    "\000\024\004\037\005\131\007\032\010\042\011\030\014" +
    "\043\032\012\033\007\034\006\001\002\000\004\006\142" +
    "\001\002\000\024\004\037\005\131\007\032\010\042\011" +
    "\030\014\043\032\012\033\007\034\006\001\002\000\004" +
    "\017\144\001\002\000\030\004\uffe4\005\uffe4\006\uffe4\007" +
    "\uffe4\010\uffe4\011\uffe4\012\uffe4\014\uffe4\032\uffe4\033\uffe4" +
    "\034\uffe4\001\002\000\006\017\147\030\053\001\002\000" +
    "\030\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5" +
    "\012\uffe5\014\uffe5\032\uffe5\033\uffe5\034\uffe5\001\002\000" +
    "\030\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6" +
    "\012\uffe6\014\uffe6\032\uffe6\033\uffe6\034\uffe6\001\002\000" +
    "\004\012\ufff5\001\002\000\004\014\152\001\002\000\004" +
    "\031\153\001\002\000\004\020\154\001\002\000\004\016" +
    "\155\001\002\000\004\017\156\001\002\000\030\004\uffe2" +
    "\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2\014" +
    "\uffe2\032\uffe2\033\uffe2\034\uffe2\001\002\000\006\016\ufff7" +
    "\031\ufff7\001\002\000\012\016\ufffa\032\012\033\007\034" +
    "\006\001\002\000\004\016\162\001\002\000\004\011\030" +
    "\001\002\000\012\002\ufffc\032\ufffc\033\ufffc\034\ufffc\001" +
    "\002\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\162\000\012\003\010\004\004\006\003\007\007\001" +
    "\001\000\010\004\163\006\003\007\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\007\017\012\020\013\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\023\001\001\000\006\007" +
    "\017\013\024\001\001\000\002\001\001\000\004\014\025" +
    "\001\001\000\002\001\001\000\004\005\030\001\001\000" +
    "\030\005\040\007\034\010\032\015\043\016\050\017\046" +
    "\020\045\021\033\024\044\032\047\033\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\005\040\007\034" +
    "\010\032\015\043\016\050\017\046\020\045\021\033\024" +
    "\147\032\047\033\035\001\001\000\002\001\001\000\004" +
    "\016\145\001\001\000\002\001\001\000\010\022\142\025" +
    "\055\027\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\022" +
    "\057\025\055\027\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\026\074\035\077\001\001\000\006\030" +
    "\066\034\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\022\062\025\055\027\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\072\001" +
    "\001\000\002\001\001\000\006\030\073\034\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\025\100\027\056\001\001\000\006" +
    "\026\101\035\077\001\001\000\002\001\001\000\012\022" +
    "\104\023\103\025\055\027\056\001\001\000\002\001\001" +
    "\000\004\031\105\001\001\000\002\001\001\000\010\022" +
    "\107\025\055\027\056\001\001\000\004\031\110\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\022\113\025" +
    "\055\027\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\011\121\022\122\025\055\027\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\022\126\025\055\027" +
    "\056\001\001\000\010\022\125\025\055\027\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\005\040\007" +
    "\034\015\043\016\050\017\046\020\045\021\033\032\131" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\005" +
    "\040\007\034\015\043\016\050\017\046\020\045\021\033" +
    "\032\134\033\133\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\011\136\022\122\025\055\027\056\001\001" +
    "\000\002\001\001\000\022\005\040\007\034\015\043\016" +
    "\050\017\046\020\045\021\033\032\140\001\001\000\002" +
    "\001\001\000\022\005\040\007\034\015\043\016\050\017" +
    "\046\020\045\021\033\032\134\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\007\017" +
    "\012\160\013\021\001\001\000\002\001\001\000\004\005" +
    "\162\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$A4Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$A4Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$A4Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$A4Parser$actions {
  private final A4Parser parser;

  /** Constructor */
  CUP$A4Parser$actions(A4Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$A4Parser$do_action(
    int                        CUP$A4Parser$act_num,
    java_cup.runtime.lr_parser CUP$A4Parser$parser,
    java.util.Stack            CUP$A4Parser$stack,
    int                        CUP$A4Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$A4Parser$result;

      /* select the action based on the action number */
      switch (CUP$A4Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // multDiv ::= DIV 
            {
              String RESULT = null;
		RESULT = "/";
              CUP$A4Parser$result = new java_cup.runtime.Symbol(26/*multDiv*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // multDiv ::= MULT 
            {
              String RESULT = null;
		RESULT = "*";
              CUP$A4Parser$result = new java_cup.runtime.Symbol(26/*multDiv*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // addSub ::= MINUS 
            {
              String RESULT = null;
		RESULT = "-";
              CUP$A4Parser$result = new java_cup.runtime.Symbol(27/*addSub*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // addSub ::= PLUS 
            {
              String RESULT = null;
		RESULT = "+";
              CUP$A4Parser$result = new java_cup.runtime.Symbol(27/*addSub*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // type ::= STRING 
            {
              String RESULT = null;
		RESULT = "String";
              CUP$A4Parser$result = new java_cup.runtime.Symbol(5/*type*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // type ::= REAL 
            {
              String RESULT = null;
		RESULT = "double";
              CUP$A4Parser$result = new java_cup.runtime.Symbol(5/*type*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // type ::= INT 
            {
              String RESULT = null;
		RESULT = "int";
              CUP$A4Parser$result = new java_cup.runtime.Symbol(5/*type*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // extraActual ::= COMMA expression extraActual 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).value;
		int ealeft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String ea = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = ","+e+ea;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(23/*extraActual*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // extraActual ::= COMMA expression 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = ","+e;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(23/*extraActual*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // actualParams ::= 
            {
              String RESULT = null;
		RESULT = "";
              CUP$A4Parser$result = new java_cup.runtime.Symbol(17/*actualParams*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // actualParams ::= expression extraActual 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e + a;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(17/*actualParams*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // actualParams ::= expression 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(17/*actualParams*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // boolExpression ::= expression NOTEQUAL expression 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e + "!=" + e1;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(7/*boolExpression*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // boolExpression ::= expression EQUALTO expression 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e + "==" + e1;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(7/*boolExpression*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // primaryExprs ::= multDiv primaryExpr 
            {
              String RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = m + p;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(22/*primaryExprs*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // primaryExprs ::= multDiv primaryExpr primaryExprs 
            {
              String RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String ps = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = m + p+ ps;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(22/*primaryExprs*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // primaryExpr ::= ID LEFTPAREN actualParams RIGHTPAREN 
            {
              String RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-3)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).value;
		RESULT = d + "(" + a + ")";
              CUP$A4Parser$result = new java_cup.runtime.Symbol(21/*primaryExpr*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // primaryExpr ::= LEFTPAREN expression RIGHTPAREN 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).value;
		RESULT = "("+e+")";
              CUP$A4Parser$result = new java_cup.runtime.Symbol(21/*primaryExpr*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // primaryExpr ::= ID 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = "" + i;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(21/*primaryExpr*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // primaryExpr ::= NUM 
            {
              String RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = "" + n;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(21/*primaryExpr*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // multiplicativeExprs ::= addSub multiplicativeExpr 
            {
              String RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = a+m;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(20/*multiplicativeExprs*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // multiplicativeExprs ::= addSub multiplicativeExpr multiplicativeExprs 
            {
              String RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).value;
		int msleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int msright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String ms = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = a+m+ms;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(20/*multiplicativeExprs*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // multiplicativeExpr ::= primaryExpr primaryExprs 
            {
              String RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String ps = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = p+ps;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(19/*multiplicativeExpr*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // multiplicativeExpr ::= primaryExpr 
            {
              String RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = p;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(19/*multiplicativeExpr*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expression ::= multiplicativeExpr multiplicativeExprs 
            {
              String RESULT = null;
		int m1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).right;
		String m1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String m2 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = m1 + m2;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(16/*expression*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expression ::= multiplicativeExpr 
            {
              String RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = m;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(16/*expression*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // readStmt ::= READ LEFTPAREN ID COMMA QSTRING RIGHTPAREN SEMI 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-4)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).right;
		String q = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).value;
		RESULT ="$_2 = new Scanner(new FileInputStream("+q+"));\n"+ i+"=$_2.nextInt();\n";
              CUP$A4Parser$result = new java_cup.runtime.Symbol(15/*readStmt*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // writeStmt ::= WRITE LEFTPAREN expression COMMA QSTRING RIGHTPAREN SEMI 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-4)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).right;
		String q = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).value;
		RESULT = "\n_1 = new PrintWriter(new File("+q+"));\n$_1.print("+e+");$_1.close();\n";
              CUP$A4Parser$result = new java_cup.runtime.Symbol(14/*writeStmt*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // returnStmt ::= RETURN expression SEMI 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).value;
		RESULT = "return "+e+";\n"; 
              CUP$A4Parser$result = new java_cup.runtime.Symbol(13/*returnStmt*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // localVarDecl ::= type assignStmt 
            {
              String RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = t+" "+a;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(11/*localVarDecl*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // localVarDecl ::= type ID SEMI 
            {
              String RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).value;
		RESULT = t +" "+i+";\n";
              CUP$A4Parser$result = new java_cup.runtime.Symbol(11/*localVarDecl*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // assignStmt ::= ID ASSIGN QSTRING SEMI 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-3)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).right;
		String q = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).value;
		RESULT = i + "=" + q + ";\n";
              CUP$A4Parser$result = new java_cup.runtime.Symbol(12/*assignStmt*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // assignStmt ::= ID ASSIGN expression SEMI 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).value;
		RESULT = i + "=" + e + ";\n";
              CUP$A4Parser$result = new java_cup.runtime.Symbol(12/*assignStmt*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // unmatchedstmt ::= IF LEFTPAREN boolExpression RIGHTPAREN matchedstmt 
            {
              String RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = "if("+b+")"+m;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(25/*unmatchedstmt*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // unmatchedstmt ::= IF LEFTPAREN boolExpression RIGHTPAREN matchedstmt ELSE unmatchedstmt 
            {
              String RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = "if("+b+")"+m+"else"+u;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(25/*unmatchedstmt*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // matchedstmt ::= IF LEFTPAREN boolExpression RIGHTPAREN matchedstmt ELSE matchedstmt 
            {
              String RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-4)).value;
		int m1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).right;
		String m1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String m2 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = "if("+b+")"+m1+"else"+m2;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(24/*matchedstmt*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // matchedstmt ::= readStmt 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(24/*matchedstmt*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // matchedstmt ::= writeStmt 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(24/*matchedstmt*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // matchedstmt ::= returnStmt 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(24/*matchedstmt*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // matchedstmt ::= localVarDecl 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(24/*matchedstmt*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // matchedstmt ::= assignStmt 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(24/*matchedstmt*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // matchedstmt ::= block 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = e;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(24/*matchedstmt*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= matchedstmt 
            {
              String RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = m;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(6/*statement*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= unmatchedstmt 
            {
              String RESULT = null;
		int uleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = u;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(6/*statement*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // manyStmt ::= statement 
            {
              String RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT =s;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(18/*manyStmt*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // manyStmt ::= statement manyStmt 
            {
              String RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = s+m;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(18/*manyStmt*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // block ::= BEGIN manyStmt END 
            {
              String RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).value;
		RESULT = "{"+m+"}";
              CUP$A4Parser$result = new java_cup.runtime.Symbol(3/*block*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // formalParam ::= type ID 
            {
              String RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = t+" "+i;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(9/*formalParam*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // extraParam ::= 
            {
              String RESULT = null;
		RESULT = "";
              CUP$A4Parser$result = new java_cup.runtime.Symbol(10/*extraParam*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // extraParam ::= COMMA formalParam extraParam 
            {
              String RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = ","+f+e;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(10/*extraParam*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // formalParams ::= 
            {
              String RESULT = null;
		RESULT = "";
              CUP$A4Parser$result = new java_cup.runtime.Symbol(8/*formalParams*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // formalParams ::= formalParam extraParam 
            {
              String RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT =f + e;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(8/*formalParams*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // methodDecl ::= type ID LEFTPAREN formalParams RIGHTPAREN block 
            {
              String RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = "public static "+ t + " " +i+ "("+f+") throws Exception"+b;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(4/*methodDecl*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // methodDecl ::= type MAIN ID LEFTPAREN formalParams RIGHTPAREN block 
            {
              String RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		RESULT = "public static void main(String args[]) throws Exception" + b;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(4/*methodDecl*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= methodDecl program 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		 RESULT =  e + e1; 
              CUP$A4Parser$result = new java_cup.runtime.Symbol(2/*program*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= methodDecl 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		 RESULT = e;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(2/*program*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program2 EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).value;
		RESULT = start_val;
              CUP$A4Parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$A4Parser$parser.done_parsing();
          return CUP$A4Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program2 ::= program 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).value;
		 RESULT=
"import java.io.*;\n"
+"import java.util.*;\n"
+"class A4 {"
+"\nstatic Scanner _2;\n"+"\n\tstatic PrintWriter _1;"+e+"}";
              CUP$A4Parser$result = new java_cup.runtime.Symbol(1/*program2*/, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A4Parser$stack.elementAt(CUP$A4Parser$top-0)).right, RESULT);
            }
          return CUP$A4Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

